.row-fluid
  .span6.pagination-centered
    .row-fluid
      - if @nugget.submitter_notes.present?
        ="notes: #{@nugget.submitter_notes}"
    .row-fluid.pagination-centered
      - @nugget.nugget_signages.each do |s|
        =image_tag s.signage_url(:small), {id:"signage_#{s.id}", :"data-big"=>"#{s.signage_url(:medium)}"}
        %br
        %button(type="button" id="rotate_left" data-id="#{s.id}" class="btn btn-info btn-small")
          = '&lArr; rotate'.html_safe
        %button(type="button" id="rotate_right" data-id="#{s.id}" class="btn btn-info btn-small")
          = 'rotate &rArr;'.html_safe
        :javascript
          $("#signage_#{s.id}").mlens(
          {
            imgSrc: $("#signage_#{s.id}").attr("data-big"), // path of the hi-res version of the image
            lensShape: "circle",        // shape of the lens (circle or square)
            lensSize: 180,          // size of the lens (in px)
            borderSize: 4,          // size of the lens border (in px)
            borderColor: "#fff",        // color of the lens border (#hex)
            borderRadius: 0         // border radius (optional, only if the shape is square)
          });
          var angle_#{s.id} = 0;
          $('#read_signage #rotate_left[data-id="#{s.id}"]').on('click', function (e) {
            var id = $(this).data('id');
            angle_#{s.id} -= 90;
            $('#read_signage #signage_'+id).rotate({ animateTo:angle_#{s.id}})
          });
          $('#read_signage #rotate_right[data-id="#{s.id}"]').on('click', function (e) {
            var id = $(this).data('id');
            angle_#{s.id} += 90;
            $('#read_signage #signage_'+id).rotate({ animateTo:angle_#{s.id}})
          });
        %br
        %br
  .span6
    .row-fluid.pagination-centered
      %h4 Do any of these apply?
      %button(type="button" id="blurry" class="btn btn-danger") Too Blurry To Read
      %h4
      %button(type="button" id="inappropriate" class="btn btn-warning") Inappropriate Image
      :javascript
        // blurry
        $('#read_signage #blurry').on('click', function (e) {
          $.ajax({
            url: '#{tag_as_blurry_nugget_path(@nugget)}',
            success: function( data ) {
              location.href = '#{jobboard_path}'
            }
          });
        });
        // inappropriate
        $('#read_signage #inappropriate').on('click', function (e) {
          $.ajax({
            url: '#{tag_as_inappropriate_nugget_path(@nugget)}',
            success: function( data ) {
              location.href = '#{jobboard_path}'
            }
          });
        });
        // cancel
        $('#read_signage button[data-dismiss="modal"]').on('click', function (e) {
          $.ajax({
            url: '#{unset_editable_time_nugget_path(@nugget)}',
            success: function( data ) {}
          });
        });
        // submit form
        $('#read_signage_submit').on('click', function (e) {
          $('#edit_nugget_#{@nugget.id}').submit();
        });
    .row-fluid &nbsp;
    .row-fluid
      %h4 If none of above, then:
      = simple_form_for(@nugget,:url => update_signage_nugget_path(@nugget), :html => { :method => :put, :class => "form-horizontal" }) do |f|
        - if @nugget.errors.any?
          .row-fluid
            #error_explanation
              %h2= "#{pluralize(@nugget.errors.count, "error")} prohibited this nugget from being saved:"
              %ul
                - @nugget.errors.full_messages.each do |msg|
                  %li= msg

        %h5 Signage Phone
        = f.input_field :signage_phone, placeholder: '512-555-1212', required: false, :'data-validation-regex-regex' => "(?:(?:(\s*\(?([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*)|([2-9]1[02-9]|[2â€Œâ€‹-9][02-8]1|[2-9][02-8][02-9]))\)?\s*(?:[.-]\s*)?)([2-9]1[02-9]|[2-9][02-9]1|[2-9]â€Œâ€‹[02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})", :'data-validation-regex-message' => "Must be a phone number"
        :javascript
          $("#read_signage #nugget_signage_phone").jqBootstrapValidation();
          //alert('hi');

        %h5 Listing Type
        = f.input_field :signage_listing_type, as: :radio_buttons, collection: [ "lease", "sale"], :item_wrapper_class => 'inline'
